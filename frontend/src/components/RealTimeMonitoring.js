import React, { useState, useRef, useEffect } from 'react';
import { Typography, Grid, Card, CardContent, Button, Modal, Box } from '@mui/material';
import jsPDF from 'jspdf'; // Import jsPDF library

const RealTimeMonitoring = () => {
  const [open, setOpen] = useState(false);
  const [supervisorNotified, setSupervisorNotified] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState(""); // To store the notification message
  const videoRef = useRef(null);
  const notificationRef = useRef(null); // Ref to the notification container

  const [currentQueue, setCurrentQueue] = useState(Math.floor(Math.random() * 30)); // Queue size randomization

  // Increment the current queue every 10 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentQueue((prevQueue) => {
        const newQueue = prevQueue + Math.floor(Math.random() * 3); // Increase by a random value between 0 and 3
        return newQueue < 30 ? newQueue : 30; // Ensure it doesn't exceed 30
      });
    }, 10000); // 10 seconds interval

    // Cleanup on component unmount
    return () => clearInterval(interval);
  }, []);

  const handleOpen = () => {
    setOpen(true);
    startCamera();
  };

  const handleClose = () => {
    setOpen(false);
    stopCamera();
  };

  const startCamera = async () => {
    try {
      // Request camera access
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
    } catch (error) {
      console.error("Error accessing the camera", error);
      alert("Unable to access the camera. Please check your permissions.");
    }
  };

  const stopCamera = () => {
    if (videoRef.current && videoRef.current.srcObject) {
      const stream = videoRef.current.srcObject;
      const tracks = stream.getTracks();
      tracks.forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
  };

  const handleNotifySupervisor = () => {
    setSupervisorNotified(true); // Set the supervisor as notified
    setNotificationMessage("Supervisor has been notified!"); // Display message in the center of the page
  };

  const handleGenerateReport = () => {
    const generateRandomData = () => {
      const services = [
        "Mail Pickup",
        "Mail Drop-Off",
        "Package Pickup",
        "Package Drop-Off",
        "Bill Payment",
        "Postal Inquiry",
        "Passport/ID Services",
        "Money Transfer",
      ];
      const peopleData = [];
      
      for (let i = 0; i < 30; i++) {
        const numPeople = Math.floor(Math.random() * 10) + 1; // Random number of people (1-10)
        const waitingTime = Math.floor(Math.random() * 30) + 1; // Random waiting time (1-30 minutes)
        const service = services[Math.floor(Math.random() * services.length)];

        peopleData.push({
          numPeople,
          waitingTime,
          service
        });
      }

      return peopleData;
    };

    const peopleData = generateRandomData();

    // Create PDF using jsPDF
    const doc = new jsPDF();

    // Title and intro section
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("Post Office Service Report", 20, 20);

    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text("This report contains data about the post office services, including the number of people, service type, and waiting times.", 20, 30);
    
    // Draw a line under the title
    doc.setLineWidth(0.5);
    doc.line(20, 35, 190, 35); // (x1, y1, x2, y2)
    
    // Table headers
    const tableStartY = 40;
    const headerHeight = 10;
    const rowHeight = 10;
    doc.setFont("helvetica", "bold");
    doc.setFontSize(12);
    doc.text("No.", 20, tableStartY);
    doc.text("People", 40, tableStartY);
    doc.text("Service", 80, tableStartY);
    doc.text("Waiting Time (min)", 130, tableStartY);

    // Table content
    doc.setFont("helvetica", "normal");
    let yPosition = tableStartY + headerHeight;

    peopleData.forEach((data, index) => {
      doc.text((index + 1).toString(), 20, yPosition);
      doc.text(data.numPeople.toString(), 40, yPosition);
      doc.text(data.service, 80, yPosition);
      doc.text(data.waitingTime.toString(), 130, yPosition);
      yPosition += rowHeight;
    });

    // Draw a line at the end of the table
    doc.setLineWidth(0.5);
    doc.line(20, yPosition, 190, yPosition);

    // Footer section
    doc.setFont("helvetica", "italic");
    doc.setFontSize(10);
    doc.text("Generated by Post Office Real-Time Monitoring System", 20, yPosition + 10);
    doc.text("Date: " + new Date().toLocaleDateString(), 120, yPosition + 10);

    // Save the document
    doc.save("post_office_service_report.pdf");
  };

  // Close notification when clicked outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (notificationRef.current && !notificationRef.current.contains(event.target)) {
        setNotificationMessage(""); // Hide the notification
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  useEffect(() => {
    // Clean up the camera stream when the component is unmounted or modal is closed
    return () => {
      stopCamera();
    };
  }, []);

  // Random "A Active" status generation
  const getRandomStatus = () => {
    const statuses = ["Active", "Temporarily Unavailable", "Under Maintenance", "Fully Operational"];
    return statuses[Math.floor(Math.random() * statuses.length)];
  };

  return (
    <div style={{ padding: '20px' }}>
      <Typography variant="h2" gutterBottom>
        Live Monitoring
      </Typography>
      <Typography variant="subtitle1" gutterBottom>
        AI-powered real-time counter service monitoring
      </Typography>

      {/* Notification Message (center of the page) */}
      {notificationMessage && (
        <div
          ref={notificationRef} // Ref to handle outside clicks
          style={{
            position: 'fixed',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            padding: '20px',
            backgroundColor: '#ffeb3b',
            borderRadius: '8px',
            boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',
            textAlign: 'center'
          }}
        >
          <Typography variant="h6" color="textPrimary">
            {notificationMessage}
          </Typography>
        </div>
      )}

      <Grid container spacing={2}>
        <Grid item xs={12} sm={6} md={4}>
          <Card sx={{ boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', borderRadius: '12px' }}>
            <CardContent>
              <Typography variant="h5" component="div">
                Counter I Live Feed
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {getRandomStatus()} {/* Random A Active status */}
              </Typography>
              <Box textAlign="center" mt={2}>
                <Button variant="contained" onClick={handleOpen}>
                  View Live Camera
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={4}>
          <Card sx={{ boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', borderRadius: '12px' }}>
            <CardContent>
              <Typography variant="h5" component="div">
                Current Queue
              </Typography>
              <Typography variant="h3">{currentQueue}</Typography> {/* Random current queue size */}
              <Typography variant="body2" color="text.secondary">
                Normal level
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={4}>
          <Card sx={{ boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', borderRadius: '12px' }}>
            <CardContent>
              <Typography variant="h5" component="div">
                Service Status
              </Typography>
              <Typography variant="h6">Operating Normally</Typography>
              <Typography variant="body2" color="text.secondary">
                Last updated: Just now
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12}>
          <Card sx={{ boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', borderRadius: '12px' }}>
            <CardContent sx={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="h5" sx={{ fontWeight: 'bold', fontSize: '1.25rem', color: '#333', marginRight: '20px' }}>
                Quick Actions
              </Typography>
              <div style={{ display: 'flex', gap: '10px' }}>
                <Button
                  variant="contained"
                  sx={{ padding: '10px 20px', borderRadius: '50px', backgroundColor: '#3f51b5', color: '#fff', '&:hover': { backgroundColor: '#303f9f' } }}
                  onClick={handleNotifySupervisor} // Notify Supervisor action
                >
                  Notify Supervisor
                </Button>
                <Button
                  variant="contained"
                  sx={{ padding: '10px 20px', borderRadius: '50px', backgroundColor: '#3f51b5', color: '#fff', '&:hover': { backgroundColor: '#303f9f' } }}
                  onClick={handleGenerateReport} // Generate Report action
                >
                  Generate Report
                </Button>
              </div>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Modal open={open} onClose={handleClose}>
        <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: '80%', bgcolor: 'background.paper', boxShadow: 24, p: 4 }}>
          <Typography variant="h6" component="h2">
            Enhanced Live Camera View
          </Typography>
          <Box textAlign="center" mt={2}>
            <video ref={videoRef} autoPlay controls style={{ width: '100%' }} />
          </Box>
        </Box>
      </Modal>
    </div>
  );
};

export default RealTimeMonitoring;
